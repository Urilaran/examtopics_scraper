name: Python package

on:
  push:
    tags: v*.*.*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Build package
        run: python -m build
      - name: Extract version
        uses: actions-ecosystem/action-regex-match@v2
        id: get-version
        with:
          regex: '^v((?:\d+)\.(?:\d+)\.(?:\d+)(-[0-9A-Za-z-]+)?)(\+[0-9A-Za-z-]+)?$'
          text: ${{ github.ref_name }}
      - name: Extract changelog
        id: get-changelog
        run: |
          echo 'CHANGELOG<<CHANGELOG_EOF' >> $GITHUB_ENV
          cat CHANGELOG.md | sed '1,/## ${{ steps.get-version.outputs.group1 }}/d;/## /,$d' | awk '
              /[[:graph:]]/ {
                  p=1  # A non-empty line: set the flag to begin printing lines  
                  for (i=1; i<=n; i++) print ""  # Print the accumulated inner empty lines 
                  n=0
                  print  # Print the current line
              }
              p && /^[[:space:]]*$/ {
                  n++  # A potentially inner empty line: remember it
              }
          ' >> $GITHUB_ENV
          echo 'CHANGELOG_EOF' >> $GITHUB_ENV
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: dist/examtopics_scraper-*
          body: ${{ env.CHANGELOG }}
          prerelease: ${{ steps.get-version.outputs.group2 != '' }}
          token: ${{ secrets.RELEASE_TOKEN }}
